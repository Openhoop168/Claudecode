name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

# ① 顶层就授予“可写”权限（双保险）
permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  id-token: write

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest

    # ② job 级别再授一次（一些 Action 只读顶层，有的读 job 层）
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      id-token: write

    steps:
      - name: Checkout repository (use PAT so we can push)
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
            persist-credentials: true
            token: ${{ secrets.GH_PAT }}   # 你创建的 classic PAT（勾选 repo 全部）

      - name: Configure git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # ③ 先验证 Anthropic key（必须 200 再继续）
      - name: Verify Anthropic API key works
        env:
          KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          set -e
          echo "Pinging Anthropic /v1/models ..."
          CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01" \
            https://api.anthropic.com/v1/models)
          echo "HTTP $CODE"
          test "$CODE" = "200"

      # ④ 动态选择一个可用模型，并写入到环境变量 MODEL_TO_USE
      - name: Choose available Anthropic model automatically
        id: pick_model
        env:
          KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          set -e
          curl -s -H "x-api-key: $KEY" -H "anthropic-version: 2023-06-01" \
            https://api.anthropic.com/v1/models > models.json

          # 备选优先级列表（从新到旧/从强到弱）
          CANDIDATES=$(cat <<'EOF'
          claude-3-7-sonnet-20250219
          claude-3-7-sonnet-latest
          claude-3-5-sonnet-20241022
          claude-3-5-sonnet-latest
          claude-3-opus-20240229
          claude-3-sonnet-20240229
          claude-3-haiku-20240307
          EOF
          )
          PICK=""
          for m in $CANDIDATES; do
            if jq -er --arg M "$m" '.data[]?.id | select(.==$M)' models.json >/dev/null 2>&1; then
              PICK="$m"
              break
            fi
          done

          if [ -z "$PICK" ]; then
            echo "❌ No candidate model found in your account."
            echo "Raw list:"
            cat models.json
            exit 1
          fi

          echo "✅ Picked model: $PICK"
          echo "MODEL_TO_USE=$PICK" >> $GITHUB_ENV

      # ⑤ 运行 Claude Code
      #    关键点：continue-on-error=true，让后面的兜底推送还能执行
      - name: Run Claude Code
        id: claude
        continue-on-error: true
        uses: anthropics/claude-code-action@beta
        with:
          github_token:       ${{ secrets.GH_PAT }}               # 用 PAT 提权，确保可 push
          anthropic_api_key:  ${{ secrets.ANTHROPIC_API_KEY }}
          model:              ${{ env.MODEL_TO_USE }}             # 用上一步挑选的可用模型
          additional_permissions: |
            actions: read
          trigger_phrase: "@claude"
          label_trigger: "claude"
          branch_prefix: "claude/"
          mode: "tag"   # 保持默认行为即可（有需要再改）

      # ⑥ 兜底：如果当前在 claude/* 分支，且远端还没有，就推上去
      - name: Push branch if created (fallback)
        if: always()
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -e
          echo "::group::Git debug info"
          git --version
          git remote -v
          git status
          CUR=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CUR"
          echo "::endgroup::"

          # 只处理 claude/* 分支
          if [[ "$CUR" != claude/* ]]; then
            echo "Not on a claude/* branch, skip fallback push."
            exit 0
          fi

          # 确认远端是否存在该分支（存在则跳过）
          if git ls-remote --exit-code --heads origin "$CUR" >/dev/null 2>&1; then
            echo "Remote branch already exists: origin/$CUR (skip)"
            exit 0
          fi

          echo "Remote branch not found, try pushing..."
          # 这里使用 checkout 时注入的 PAT 凭据，无需再改 remote
          git push -u origin "$CUR"
          echo "✅ Fallback push done."
