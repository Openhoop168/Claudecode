name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  id-token: write

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      id-token: write

    steps:
      # 1) Checkout（用 PAT，才能推分支）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GH_PAT }}

      # 2) 配置 git 身份
      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # 3) 先验 Key 是否可用（必须 200 才继续）
      - name: Verify Anthropic API key works
        env:
          KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          set -e
          echo "Pinging Anthropic /v1/models ..."
          CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01" \
            https://api.anthropic.com/v1/models)
          echo "HTTP $CODE"
          test "$CODE" = "200"

      # 3.5) 打印 Usage（仅调试）
      - name: Check Anthropic API Usage
        env:
          KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "Fetching usage info (best-effort)..."
          curl -s https://api.anthropic.com/v1/usage \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01" | jq . || true

      # 4) 自动选择可用模型（先新后旧，按需调整）
      - name: Choose available Anthropic model
        id: choose_model
        env:
          KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          set -e
          MODELS_JSON=$(curl -s https://api.anthropic.com/v1/models \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01")

          PREFER=( "claude-4.1" "claude-4-0" "claude-3-7-sonnet"
                   "claude-3-5-sonnet-20241022" "claude-3-5-sonnet-20240620"
                   "claude-3-sonnet-20240229" "claude-3-opus-20240229" )

          CHOSEN=""
          for name in "${PREFER[@]}"; do
            HIT=$(echo "$MODELS_JSON" | jq -r --arg n "$name" '.data[]?.id | select(. == $n)' | head -n 1 || true)
            if [ -n "$HIT" ]; then CHOSEN="$HIT"; break; fi
          done
          if [ -z "$CHOSEN" ]; then CHOSEN=$(echo "$MODELS_JSON" | jq -r '.data[0].id // empty'); fi
          if [ -z "$CHOSEN" ]; then CHOSEN="claude-3-5-sonnet-20240620"; fi
          echo "Picked model: $CHOSEN"
          echo "model=$CHOSEN" >> "$GITHUB_OUTPUT"

      # 5) 运行 Claude Code（允许继续，避免 post 小错让 Job 飘红）
      - name: Run Claude Code
        id: claude
        continue-on-error: true
        uses: anthropics/claude-code-action@beta
        with:
          github_token:       ${{ secrets.GH_PAT }}
          anthropic_api_key:  ${{ secrets.ANTHROPIC_API_KEY }}
          model:              ${{ steps.choose_model.outputs.model }}
          additional_permissions: |
            actions: read
          trigger_phrase: "@claude"
          # 其他可选项：
          # use_sticky_comment: true
          # branch_prefix: "claude/"
          # label_trigger: "claude"
          # timeout_minutes: "30"

      # 6) 兜底：如果当前在 claude/* 分支，且远端还没有，就推上去
      - name: Push branch if created (fallback)
        if: always()
        run: |
          set -e
          CUR=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CUR"
          if [[ "$CUR" != claude/* ]]; then
            echo "Not on claude/* branch, skip."
            exit 0
          fi
          if git ls-remote --exit-code --heads origin "$CUR" >/dev/null 2>&1; then
            echo "Remote branch already exists: origin/$CUR"
            exit 0
          fi
          echo "Remote branch not found, pushing..."
          git push -u origin "$CUR"
          echo "Pushed: origin/$CUR"
