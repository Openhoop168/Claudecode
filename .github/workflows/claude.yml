name: Claude Code (Zhipu Gateway Compatible)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

# 顶层：给到可写权限（双保险）
permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  id-token: write

jobs:
  claude:
    # 仅当正文里@claude时才触发
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest

    # job 级别再授一次（有的 Action 只读这里）
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      id-token: write

    env:
      # ←—— 关键：把 Anthropic API 的基址重定向到智谱网关
      ANTHROPIC_API_URL:  https://open.bigmodel.cn/api/anthropic
      ANTHROPIC_BASE_URL: https://open.bigmodel.cn/api/anthropic

    steps:
      # 1) 用 PAT 检出仓库（可推分支）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GH_PAT }}

      # 2) 配置 git 身份
      - name: Configure git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # 3) 探活：对智谱网关的 /v1/models 做 200 校验
      - name: Verify API key against Zhipu gateway
        env:
          KEY: ${{ secrets.ANTHROPIC_API_KEY }}   # 这里放智谱的 Key
          BASE: ${{ env.ANTHROPIC_API_URL }}
        run: |
          set -e
          echo "Pinging $BASE/v1/models ..."
          CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01" \
            "$BASE/v1/models")
          echo "HTTP $CODE"
          test "$CODE" = "200"

      # 3.5) Dump 模型（便于排错）
      - name: Dump models (debug)
        env:
          KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          BASE: ${{ env.ANTHROPIC_API_URL }}
        run: |
          set -e
          curl -s "$BASE/v1/models" \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01" | jq .

      # 4) 从网关返回里选择可用模型（先 glm-4.5-air，再 glm-4.5）
      - name: Choose available model (glm-4.5[-air])
        id: choose_model
        env:
          KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          BASE: ${{ env.ANTHROPIC_API_URL }}
        run: |
          set -e
          MODELS=$(curl -s "$BASE/v1/models" \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01")

          pick() {
            echo "$MODELS" | jq -er --arg m "$1" '.data[]?.id | select(.==$m)' >/dev/null 2>&1
          }

          CHOSEN=""
          if pick "glm-4.5-air"; then
            CHOSEN="glm-4.5-air"
          elif pick "glm-4.5"; then
            CHOSEN="glm-4.5"
          fi

          if [ -z "$CHOSEN" ]; then
            # 没命中以上两种，就兜底拿第一个
            CHOSEN=$(echo "$MODELS" | jq -r '.data[0].id // empty')
          fi

          if [ -z "$CHOSEN" ]; then
            echo "❌ No model available from Zhipu gateway list"
            exit 1
          fi

          echo "Picked model: $CHOSEN"
          echo "model=$CHOSEN" >> "$GITHUB_OUTPUT"

      # 5) 运行 Claude Code（走智谱网关；模型用上一步选择）
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          # 有些实现只认 env，不认 inputs，这里双保险
          ANTHROPIC_API_URL:  ${{ env.ANTHROPIC_API_URL }}
          ANTHROPIC_BASE_URL: ${{ env.ANTHROPIC_BASE_URL }}
        with:
          github_token:      ${{ secrets.GH_PAT }}               # 必须用 PAT 才能推分支/回评
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}    # 智谱的 Key
          model:             ${{ steps.choose_model.outputs.model }}

          # 允许读取当前工作流运行的状态（用于评审）
          additional_permissions: |
            actions: read

          # 与 if 条件一致的触发短语
          trigger_phrase: "@claude"

          # 你也可以按需加：
          # branch_prefix: "claude/"
          # max_turns: "8"
          # timeout_minutes: "30"
          # use_sticky_comment: true

      # 6) 兜底：如果已经在 claude/* 分支且远端还没有，就尝试推上去
      - name: Fallback push created branch
        if: always()
        run: |
          set -e
          CUR=$(git rev-parse --abbrev-ref HEAD || echo "")
          echo "Current branch: $CUR"
          if [[ "$CUR" == claude/* ]]; then
            if git ls-remote --exit-code --heads origin "$CUR" >/dev/null 2>&1; then
              echo "Remote already has $CUR, skip."
            else
              echo "Pushing $CUR to origin..."
              git push -u origin "$CUR"
              echo "✅ Fallback push done."
            fi
          else
            echo "Not on a claude/* branch, skip fallback."
          fi
