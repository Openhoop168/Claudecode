name: Claude Code (via Zhipu Gateway)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

# 顶层给“可写”权限（有些 Action 只看顶层权限）
permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  id-token: write

jobs:
  claude:
    # 仅当出现 @claude 时触发
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest

    # job 级再授一次（双保险）
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      id-token: write

    env:
      # 统一走智谱网关（与本机 CLI 一致）
      ANTHROPIC_API_BASE_URL: https://open.bigmodel.cn/api/anthropic

    steps:
      # 1) Checkout（用 PAT，确保可推分支）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GH_PAT }}

      # 2) 配置 git 身份
      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # 3) 先验 Key 连通性（必须 200 才继续）
      - name: Verify API key against Zhipu gateway
        env:
          KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          BASE: ${{ env.ANTHROPIC_API_BASE_URL }}
        run: |
          set -e
          echo "Pinging $BASE/v1/models ..."
          CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01" \
            "$BASE/v1/models")
          echo "HTTP $CODE"
          test "$CODE" = "200"

      # 3.5) 可选：打印模型列表（调试用）
      - name: Dump models (debug)
        env:
          KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          BASE: ${{ env.ANTHROPIC_API_BASE_URL }}
        run: |
          curl -s "$BASE/v1/models" \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01" | jq . || true

      # 4) 自动选择可用模型（优先新版，命中网关返回的 id）
      - name: Choose available model
        id: choose_model
        env:
          KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          BASE: ${{ env.ANTHROPIC_API_BASE_URL }}
        run: |
          set -e
          MODELS_JSON=$(curl -s "$BASE/v1/models" \
            -H "x-api-key: $KEY" \
            -H "anthropic-version: 2023-06-01")

          # 根据网关实际返回调优此优先级列表（示例覆盖常见 3.5/3.7/4.x 命名）
          PREFER=(
            "claude-4.1"
            "claude-4-0"
            "claude-3-7-sonnet"
            "claude-3-5-sonnet-20241022"
            "claude-3-5-sonnet-20240620"
            "claude-3-sonnet-20240229"
            "claude-3-opus-20240229"
          )

          CHOSEN=""
          for name in "${PREFER[@]}"; do
            HIT=$(echo "$MODELS_JSON" | jq -r --arg n "$name" '.data[]?.id | select(.==$n) | . // empty' | head -n 1 || true)
            if [ -n "$HIT" ]; then
              CHOSEN="$HIT"
              break
            fi
          done

          # 如果没命中，兜底用返回列表第一个 id
          if [ -z "$CHOSEN" ]; then
            CHOSEN=$(echo "$MODELS_JSON" | jq -r '.data[0].id // empty')
          fi

          # 仍然没有，就给个保守回退
          if [ -z "$CHOSEN" ]; then
            CHOSEN="claude-3-5-sonnet-20240620"
          fi

          echo "Picked model: $CHOSEN"
          echo "model=$CHOSEN" >> "$GITHUB_OUTPUT"

      # 5) 运行 Claude Code（显式传入网关 Base URL + 密钥 + 模型）
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_API_BASE_URL: ${{ env.ANTHROPIC_API_BASE_URL }}
        with:
          github_token:       ${{ secrets.GH_PAT }}
          anthropic_api_key:  ${{ secrets.ANTHROPIC_API_KEY }}
          model:              ${{ steps.choose_model.outputs.model }}

          additional_permissions: |
            actions: read
          trigger_phrase: "@claude"
          branch_prefix: "claude/"
          mode: "tag"
          timeout_minutes: "30"

      # 6) 兜底：若当前在 claude/* 分支但远端不存在，就推上去
      - name: Fallback push branch if created
        if: always()
        run: |
          set -e
          CUR=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CUR"
          if [[ "$CUR" == claude/* ]]; then
            if ! git ls-remote --exit-code --heads origin "$CUR" >/dev/null 2>&1; then
              echo "Remote branch not found, pushing..."
              git push -u origin "$CUR"
            else
              echo "Remote branch already exists."
            fi
          else
            echo "Not on a claude/* branch, skip."
          fi
